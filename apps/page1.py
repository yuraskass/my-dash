import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import statsmodels.api as sm
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler, LabelEncoder

from dash import dcc, html, Input, Output, callback
import dash_bootstrap_components as dbc

# === Загрузка и подготовка данных ===
df = pd.read_csv('Книга2.csv')

# Сохраняем оригинальные названия регионов до кодирования
region_mapping = None
if 'Регион' in df.columns:
    unique_regions = df['Регион'].astype(str).unique()
    region_mapping = {i: name for i, name in enumerate(unique_regions)}

# Кодируем текстовые значения
label_encoder = LabelEncoder()
for column in df.select_dtypes(include=['object']).columns:
    df[column] = label_encoder.fit_transform(df[column])

# Проверка столбца 'Год'
if 'Год' not in df.columns:
    raise ValueError("В CSV-файле не найден столбец 'Год'")

available_years = sorted(df['Год'].unique())
default_year = available_years[0]

# === Список показателей ===
full_indicator_list = [
    "численность населения в трудоспособном возрасте на 1 января текущего года (человек, на 1 января, всего в трудоспособном возрасте (для мужчин 16-59,для женщин 16-54))",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) всего по всем видам экономической деятельности",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) растениеводство и животноводство, охота и предоставление соответствующих услуг в этих областях",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) лесоводство и лесозаготовки",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) обработка древесины и производство изделий из дерева и пробки, кроме мебели, производство изделий из соломки и материалов для плетения",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) обеспечение электрической энергией, газом и паром; кондиционирование воздуха",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) торговля оптовая, кроме оптовой торговли автотранспортными средствами и мотоциклами",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) торговля розничная, кроме торговли автотранспортными средствами и мотоциклами",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность сухопутного и трубопроводного транспорта",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) складское хозяйство и вспомогательная транспортная деятельность",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность в области здравоохранения",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) добыча металлических руд",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность в области телевизионного и радиовещания",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность по уходу с обеспечением проживания",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) производство пищевых продуктов",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность библиотек, архивов, музеев и прочих объектов культуры",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность в области спорта, отдыха и развлечений",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) прочие",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) работы строительные специализированные",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность в сфере телекоммуникаций",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) рыболовство и рыбоводство",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) строительство зданий",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) торговля оптовая и розничная автотранспортными средствами и мотоциклами и их ремонт",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность воздушного и космического транспорта",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность по обслуживанию зданий и территорий",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) добыча угля",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) деятельность в области архитектуры и инженерно-технического проектирования; технических испытаний, исследований и анализа",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) производство металлургическое",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) добыча прочих полезных ископаемых",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) производство химических веществ и химических продуктов",
    "количество стационарных источников загрязнения атмосферы на конец года, имеющихся у юридических лиц (единица, значение показателя за год) добыча нефти и природного газа"
]

# Определение доступных регионов с названиями
available_regions = sorted(region_mapping.items(), key=lambda x: x[1]) if region_mapping else []

# === layout — Визуальный интерфейс ===
layout = dbc.Container([
    html.H2("PCA-анализ по годам", className="my-3"),

    html.Div([
        html.Label("Выбор года"),
        dcc.Dropdown(
            id='year-selector',
            options=[{"label": str(year), "value": year} for year in available_years],
            value=default_year,
            clearable=False,
            style={"width": "300px"}
        ),
    ], className="mb-3"),

    html.Div([
        html.Label("Выбор показателя"),
        dcc.Dropdown(
            id='indicator-selector',
            options=[{"label": name, "value": name} for name in full_indicator_list],
            value=full_indicator_list[0],
            clearable=False,
            style={"width": "100%"}
        ),
    ], className="mb-3"),

    html.Div([
        html.Label("Выбор региона"),
        dcc.Dropdown(
            id='region-selector',
            options=[{"label": name, "value": code} for code, name in available_regions],
            value=None,
            placeholder="Выберите регион (необязательно)",
            clearable=True,
            style={"width": "300px"}
        ),
    ], className="mb-3"),

    dcc.Graph(id='pca-graph', className="mt-4")
])

# === Callback ===
@callback(
    Output('pca-graph', 'figure'),
    Input('year-selector', 'value'),
    Input('indicator-selector', 'value'),
    Input('region-selector', 'value')
)
def update_graph(selected_year, selected_indicator, selected_region):
    filtered_df = df[df['Год'] == selected_year]

    # Если выбран регион — фильтруем
    if selected_region is not None:
        filtered_df = filtered_df[filtered_df['Регион'] == selected_region]

    # Если после фильтрации данных нет — вернуть пустую фигуру
    if filtered_df.empty:
        return go.Figure().update_layout(
            title="Нет данных для выбранных параметров",
            xaxis=dict(visible=False),
            yaxis=dict(visible=False),
            annotations=[{
                "text": "Нет данных",
                "xref": "paper",
                "yref": "paper",
                "showarrow": False,
                "font": {"size": 20}
            }]
        )

    # Убираем нечисловые столбцы
    data_for_pca = filtered_df.drop(columns=['Год', 'Населенный пункт'], errors='ignore')
    data_for_pca = data_for_pca.select_dtypes(include=[np.number])  # оставляем только числовые

    # Заполняем NaN медианой
    data_for_pca = data_for_pca.fillna(data_for_pca.median(numeric_only=True))

    # Финальная проверка — удалим все строки, где еще остались NaN
    data_for_pca = data_for_pca.dropna()



    # Стандартизация и PCA
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(data_for_pca)

    pca = PCA(n_components=2)
    principal_components = pca.fit_transform(scaled_data)
    pca_df = pd.DataFrame(principal_components, columns=['PC1', 'PC2'])

    # Получаем название региона
    region_name = region_mapping[selected_region] if selected_region is not None and selected_region in region_mapping else ""

    # Названия регионов в hover
    if region_mapping:
        pca_df['Регион'] = filtered_df['Регион'].map(region_mapping)
    else:
        pca_df['Регион'] = filtered_df['Регион']

    pca_df['Показатель'] = filtered_df[selected_indicator].values if selected_indicator in filtered_df.columns else [None] * len(filtered_df)

    # Линия тренда (LOWESS)
    if len(pca_df) > 1:
        lowess = sm.nonparametric.lowess(pca_df["PC2"], pca_df["PC1"], frac=0.3)
        trend_x, trend_y = zip(*lowess)
    else:
        trend_x, trend_y = [], []

    # Визуализация
    fig = px.scatter(
        pca_df,
        x='PC1',
        y='PC2',
        hover_data=['Регион', 'Показатель'],
        title=f'PCA-анализ за {selected_year} год' + (f", Регион: {region_name}" if region_name else ""),
        labels={'PC1': 'Первая главная компонента', 'PC2': 'Вторая главная компонента'}
    )

    if trend_x:
        fig.add_trace(go.Scatter(
            x=trend_x,
            y=trend_y,
            mode='lines',
            line=dict(color='red', width=3),
            name='Линия тренда'
        ))

    fig.update_traces(marker=dict(size=8, color='blue'))
    return fig
